local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer

-- Debug logging function
local function log(message)
    print("[SpaceQESpam Debug]: " .. tostring(message))
end

-- Check for keypress support
local keypressSupported = false
if keypress and keyrelease then
    keypressSupported = true
    log("Executor supports keypress/keyrelease.")
elseif VirtualInputManager then
    keypressSupported = true
    log("VirtualInputManager detected as fallback.")
else
    warn("[SpaceQESpam Warning]: No keypress support. Spamming will not work.")
end

-- Check HTTP service
local httpEnabled = false
local success, httpCheck = pcall(function()
    HttpService:GetAsync("https://www.roblox.com", true)
    return true
end)
if success and httpCheck then
    httpEnabled = true
    log("HTTP service enabled.")
else
    warn("[SpaceQESpam Warning]: HTTP requests disabled or failed. Server hopping may not work. Enable HTTP in your executor.")
end

-- Wait for PlayerGui
local success, PlayerGui = pcall(function()
    return LocalPlayer:WaitForChild("PlayerGui", 10)
end)
if not success or not PlayerGui then
    warn("[SpaceQESpam Error]: Failed to find PlayerGui: " .. tostring(PlayerGui))
    return
end
log("PlayerGui found.")

-- Create UI
local ScreenGui
success, ScreenGui = pcall(function()
    local gui = Instance.new("ScreenGui")
    gui.Name = "SpaceQESpamUI"
    gui.Parent = PlayerGui
    gui.ResetOnSpawn = false
    gui.IgnoreGuiInset = true
    return gui
end)
if not success or not ScreenGui then
    warn("[SpaceQESpam Error]: Failed to create ScreenGui: " .. tostring(ScreenGui))
    return
end
log("ScreenGui created.")

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 180, 0, 320)
Frame.Position = UDim2.new(0.5, -90, 0.5, -160)
Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Frame.BackgroundTransparency = 0.2
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui
log("Frame created with height 320px.")

-- Add gradient
local UIGradient = Instance.new("UIGradient")
UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 50))
}
UIGradient.Parent = Frame

-- Add rounded corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = Frame

-- Add shadow
local Shadow = Instance.new("ImageLabel")
Shadow.Size = UDim2.new(1, 20, 1, 20)
Shadow.Position = UDim2.new(0, -10, 0, -10)
Shadow.BackgroundTransparency = 1
Shadow.Image = "rbxassetid://6014261993"
Shadow.ImageTransparency = 0.7
Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
Shadow.ScaleType = Enum.ScaleType.Slice
Shadow.SliceCenter = Rect.new(38, 38, 262, 262)
Shadow.Parent = Frame

-- Title label
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(0, 160, 0, 30)
TitleLabel.Position = UDim2.new(0, 10, 0, 10)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "MYI HUB"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextSize = 16
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.Parent = Frame
log("TitleLabel positioned at y=10 with text 'MYI HUB'.")

-- Space toggle button
local SpaceToggleButton = Instance.new("TextButton")
SpaceToggleButton.Size = UDim2.new(0, 160, 0, 30)
SpaceToggleButton.Position = UDim2.new(0, 10, 0, 50)
SpaceToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SpaceToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SpaceToggleButton.Text = "Space Spam: OFF"
SpaceToggleButton.TextSize = 14
SpaceToggleButton.Font = Enum.Font.Gotham
SpaceToggleButton.Parent = Frame
local SpaceToggleCorner = Instance.new("UICorner")
SpaceToggleCorner.CornerRadius = UDim.new(0, 8)
SpaceToggleCorner.Parent = SpaceToggleButton
log("SpaceToggleButton positioned at y=50.")

-- Space status indicator
local SpaceStatusIndicator = Instance.new("Frame")
SpaceStatusIndicator.Size = UDim2.new(0, 10, 0, 10)
SpaceStatusIndicator.Position = UDim2.new(0, 10, 0, 10)
SpaceStatusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
SpaceStatusIndicator.BorderSizePixel = 0
SpaceStatusIndicator.Parent = SpaceToggleButton
local SpaceStatusCorner = Instance.new("UICorner")
SpaceStatusCorner.CornerRadius = UDim.new(0.5, 0)
SpaceStatusCorner.Parent = SpaceStatusIndicator

-- Q/E toggle button
local QEToggleButton = Instance.new("TextButton")
QEToggleButton.Size = UDim2.new(0, 160, 0, 30)
QEToggleButton.Position = UDim2.new(0, 10, 0, 85)
QEToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
QEToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
QEToggleButton.Text = "Q/E Spam: OFF"
QEToggleButton.TextSize = 14
QEToggleButton.Font = Enum.Font.Gotham
QEToggleButton.Parent = Frame
local QEToggleCorner = Instance.new("UICorner")
QEToggleCorner.CornerRadius = UDim.new(0, 8)
QEToggleCorner.Parent = QEToggleButton
log("QEToggleButton positioned at y=85.")

-- Q/E status indicator
local QEStatusIndicator = Instance.new("Frame")
QEStatusIndicator.Size = UDim2.new(0, 10, 0, 10)
QEStatusIndicator.Position = UDim2.new(0, 10, 0, 10)
QEStatusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
QEStatusIndicator.BorderSizePixel = 0
QEStatusIndicator.Parent = QEToggleButton
local QEStatusCorner = Instance.new("UICorner")
QEStatusCorner.CornerRadius = UDim.new(0.5, 0)
QEStatusCorner.Parent = QEStatusIndicator

-- Server Hop button
local ServerHopButton = Instance.new("TextButton")
ServerHopButton.Size = UDim2.new(0, 160, 0, 30)
ServerHopButton.Position = UDim2.new(0, 10, 0, 120)
ServerHopButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ServerHopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ServerHopButton.Text = "Server Hop"
ServerHopButton.TextSize = 14
ServerHopButton.Font = Enum.Font.Gotham
ServerHopButton.Parent = Frame
local ServerHopCorner = Instance.new("UICorner")
ServerHopCorner.CornerRadius = UDim.new(0, 8)
ServerHopCorner.Parent = ServerHopButton
log("ServerHopButton positioned at y=120.")

-- Rejoin button
local RejoinButton = Instance.new("TextButton")
RejoinButton.Size = UDim2.new(0, 160, 0, 30)
RejoinButton.Position = UDim2.new(0, 10, 0, 155)
RejoinButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
RejoinButton.TextColor3 = Color3.fromRGB(255, 255, 255)
RejoinButton.Text = "Rejoin"
RejoinButton.TextSize = 14
RejoinButton.Font = Enum.Font.Gotham
RejoinButton.Parent = Frame
local RejoinCorner = Instance.new("UICorner")
RejoinCorner.CornerRadius = UDim.new(0, 8)
RejoinCorner.Parent = RejoinButton
log("RejoinButton positioned at y=155.")

-- Hide button
local HideButton = Instance.new("TextButton")
HideButton.Size = UDim2.new(0, 160, 0, 30)
HideButton.Position = UDim2.new(0, 10, 0, 190)
HideButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
HideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
HideButton.Text = "Hide UI"
HideButton.TextSize = 14
HideButton.Font = Enum.Font.Gotham
HideButton.Parent = Frame
local HideCorner = Instance.new("UICorner")
HideCorner.CornerRadius = UDim.new(0, 8)
HideCorner.Parent = HideButton
log("HideButton positioned at y=190.")

-- Hotkey label
local HotkeyLabel = Instance.new("TextLabel")
HotkeyLabel.Size = UDim2.new(0, 160, 0, 20)
HotkeyLabel.Position = UDim2.new(0, 10, 0, 225)
HotkeyLabel.BackgroundTransparency = 1
HotkeyLabel.Text = "UI Hotkey: H"
HotkeyLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
HotkeyLabel.TextSize = 12
HotkeyLabel.Font = Enum.Font.Gotham
HotkeyLabel.TextXAlignment = Enum.TextXAlignment.Left
HotkeyLabel.Parent = Frame
log("HotkeyLabel positioned at y=225.")

-- Record Key button
local RecordKeyButton = Instance.new("TextButton")
RecordKeyButton.Size = UDim2.new(0, 160, 0, 25)
RecordKeyButton.Position = UDim2.new(0, 10, 0, 250)
RecordKeyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
RecordKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
RecordKeyButton.Text = "Record Key"
RecordKeyButton.TextSize = 14
RecordKeyButton.Font = Enum.Font.Gotham
RecordKeyButton.Parent = Frame
local RecordKeyCorner = Instance.new("UICorner")
RecordKeyCorner.CornerRadius = UDim.new(0, 8)
RecordKeyCorner.Parent = RecordKeyButton
log("RecordKeyButton positioned at y=250.")

-- Disable button
local DisableButton = Instance.new("TextButton")
DisableButton.Size = UDim2.new(0, 160, 0, 25)
DisableButton.Position = UDim2.new(0, 10, 0, 280)
DisableButton.BackgroundColor3 = Color3.fromRGB(80, 40, 40)
DisableButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DisableButton.Text = "Disable Script"
DisableButton.TextSize = 14
DisableButton.Font = Enum.Font.Gotham
DisableButton.Parent = Frame
local DisableCorner = Instance.new("UICorner")
DisableCorner.CornerRadius = UDim.new(0, 8)
DisableCorner.Parent = DisableButton
log("DisableButton positioned at y=280.")

-- Variables
local isSpaceSpamming = false
local isQESpamming = false
local isUIVisible = true
local currentHotkey = Enum.KeyCode.H
local spaceSpamCoroutine = nil
local QESpamCoroutine = nil
local hotkeyConnection = nil
local spaceToggleConnection = nil
local QEToggleConnection = nil
local isRecordingKey = false

-- Store original button sizes
local buttonSizes = {
    [SpaceToggleButton] = UDim2.new(0, 160, 0, 30),
    [QEToggleButton] = UDim2.new(0, 160, 0, 30),
    [ServerHopButton] = UDim2.new(0, 160, 0, 30),
    [RejoinButton] = UDim2.new(0, 160, 0, 30),
    [HideButton] = UDim2.new(0, 160, 0, 30),
    [RecordKeyButton] = UDim2.new(0, 160, 0, 25),
    [DisableButton] = UDim2.new(0, 160, 0, 25)
}

-- Animation functions
local function animateButton(button, hover)
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local originalSize = buttonSizes[button]
    local scale = hover and UDim2.new(0, originalSize.X.Offset * 1.05, 0, originalSize.Y.Offset * 1.05) or originalSize
    local color = hover and Color3.fromRGB(80, 80, 80) or Color3.fromRGB(60, 60, 60)
    if button == DisableButton then
        color = hover and Color3.fromRGB(100, 50, 50) or Color3.fromRGB(80, 40, 40)
    end
    local success, err = pcall(function()
        TweenService:Create(button, tweenInfo, {Size = scale, BackgroundColor3 = color}):Play()
    end)
    if not success then
        log("Button animation failed: " .. tostring(err))
    end
end

local function animateUI(visible)
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local buttons = {SpaceToggleButton, QEToggleButton, ServerHopButton, RejoinButton, HideButton, RecordKeyButton, DisableButton}
    if visible then
        Frame.Visible = true
        local frameTween = TweenService:Create(Frame, tweenInfo, {BackgroundTransparency = 0.2})
        local buttonTweens = {}
        for _, button in pairs(buttons) do
            table.insert(buttonTweens, TweenService:Create(button, tweenInfo, {TextTransparency = 0, BackgroundTransparency = 0}))
        end
        frameTween:Play()
        for _, tween in pairs(buttonTweens) do
            tween:Play()
        end
        frameTween.Completed:Wait()
        log("UI faded in with original position retained.")
    else
        local frameTween = TweenService:Create(Frame, tweenInfo, {BackgroundTransparency = 1})
        local buttonTweens = {}
        for _, button in pairs(buttons) do
            table.insert(buttonTweens, TweenService:Create(button, tweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}))
        end
        frameTween:Play()
        for _, tween in pairs(buttonTweens) do
            tween:Play()
        end
        frameTween.Completed:Wait()
        Frame.Visible = false
        log("UI faded out.")
    end
end

-- Function to simulate key press
local function simulateKey(keyCode, keyName)
    if not keypressSupported then
        log("Keypress not supported, skipping: " .. keyName)
        return false
    end
    local success, err = pcall(function()
        if keypress and keyrelease then
            keypress(keyCode)
            wait(0.005)
            keyrelease(keyCode)
        else
            VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
            wait(0.01)
            VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
        end
    end)
    if not success then
        warn("[SpaceQESpam Error]: Keypress failed for " .. keyName .. ": " .. tostring(err))
        return false
    end
    log("Simulated keypress: " .. keyName)
    return true
end

-- Function to spam Space key
local function spamSpace()
    log("Starting spamSpace coroutine.")
    while isSpaceSpamming do
        local deltaTime = RunService.RenderStepped:Wait()
        if deltaTime > 0.033 then -- Skip if FPS < 30
            log("Low FPS detected, skipping Space keypress.")
            continue
        end
        if not simulateKey(0x20, "Space") then
            isSpaceSpamming = false
            SpaceToggleButton.Text = "Space Spam: OFF"
            SpaceStatusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            break
        end
        wait(0.025) -- 25ms delay
    end
    log("spamSpace coroutine stopped.")
end

-- Function to spam Q and E keys alternately
local function spamQE()
    log("Starting spamQE coroutine with wait(0). Warning: May cause lag or input throttling.")
    while isQESpamming do
        local deltaTime = RunService.RenderStepped:Wait()
        if deltaTime > 0.033 then -- Skip if FPS < 30
            log("Low FPS detected, skipping Q/E keypress.")
            continue
        end
        if not simulateKey(0x51, "Q") then
            isQESpamming = false
            QEToggleButton.Text = "Q/E Spam: OFF"
            QEStatusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            break
        end
        wait(0) -- Zero delay
        if not isQESpamming then break end
        if not simulateKey(0x45, "E") then
            isQESpamming = false
            QEToggleButton.Text = "Q/E Spam: OFF"
            QEStatusIndicator.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            break
        end
        wait(0) -- Zero delay
    end
    log("spamQE coroutine stopped.")
end

-- Function to hop to a different server
local function serverHop()
    log("Attempting server hop for PlaceId: " .. game.PlaceId)
    if not httpEnabled then
        warn("[SpaceQESpam Error]: HTTP requests disabled, cannot server hop. Enable HTTP in your executor.")
        return
    end
    local success, result = pcall(function()
        local placeId = game.PlaceId
        local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
        local retries = 2
        local response
        for i = 1, retries do
            local ok, res = pcall(function()
                return HttpService:GetAsync(url)
            end)
            if ok then
                response = res
                break
            else
                log("HTTP request failed, retry " .. i .. ": " .. tostring(res))
                wait(1)
            end
        end
        if not response then
            warn("[SpaceQESpam Error]: Failed to fetch servers after retries.")
            return false
        end
        local servers = HttpService:JSONDecode(response)
        if not servers or not servers.data then
            warn("[SpaceQESpam Warning]: Invalid server data received.")
            return false
        end
        for _, server in ipairs(servers.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                log("Teleporting to server: " .. server.id)
                TeleportService:TeleportToPlaceInstance(placeId, server.id, LocalPlayer)
                return true
            end
        end
        warn("[SpaceQESpam Warning]: No suitable servers found for PlaceId: " .. placeId)
        return false
    end)
    if not success then
        warn("[SpaceQESpam Error]: Server hop failed: " .. tostring(result))
    end
end

-- Function to rejoin the same server
local function rejoin()
    log("Attempting to rejoin server: " .. game.JobId)
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
    end)
    if not success then
        warn("[SpaceQESpam Error]: Rejoin failed: " .. tostring(err))
    end
end

-- Toggle Space spam function
local function toggleSpaceSpam()
    isSpaceSpamming = not isSpaceSpamming
    SpaceToggleButton.Text = isSpaceSpamming and "Space Spam: ON" or "Space Spam: OFF"
    SpaceStatusIndicator.BackgroundColor3 = isSpaceSpamming and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    if isSpaceSpamming then
        if spaceSpamCoroutine then
            coroutine.close(spaceSpamCoroutine)
        end
        spaceSpamCoroutine = coroutine.create(spamSpace)
        coroutine.resume(spaceSpamCoroutine)
    else
        if spaceSpamCoroutine then
            coroutine.close(spaceSpamCoroutine)
            spaceSpamCoroutine = nil
        end
    end
    log("Space spam toggled: " .. tostring(isSpaceSpamming))
end

-- Toggle Q/E spam function
local function toggleQESpam()
    isQESpamming = not isQESpamming
    QEToggleButton.Text = isQESpamming and "Q/E Spam: ON" or "Q/E Spam: OFF"
    QEStatusIndicator.BackgroundColor3 = isQESpamming and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    if isQESpamming then
        if QESpamCoroutine then
            coroutine.close(QESpamCoroutine)
        end
        QESpamCoroutine = coroutine.create(spamQE)
        coroutine.resume(QESpamCoroutine)
    else
        if QESpamCoroutine then
            coroutine.close(QESpamCoroutine)
            QESpamCoroutine = nil
        end
    end
    log("Q/E spam toggled: " .. tostring(isQESpamming))
end

-- Toggle UI visibility
local function toggleUIVisibility()
    isUIVisible = not isUIVisible
    HideButton.Text = isUIVisible and "Hide UI" or "Show UI"
    animateUI(isUIVisible)
    log("UI visibility toggled: " .. tostring(isUIVisible))
end

-- Update hotkey
local function updateHotkey(newKeyCode)
    if hotkeyConnection then
        hotkeyConnection:Disconnect()
        hotkeyConnection = nil
    end
    local success, keyName = pcall(function()
        return newKeyCode.Name
    end)
    if success and keyName then
        currentHotkey = newKeyCode
        HotkeyLabel.Text = "UI Hotkey: " .. keyName
        hotkeyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if not gameProcessedEvent and input.KeyCode == currentHotkey then
                toggleUIVisibility()
            end
        end)
        log("Hotkey updated to: " .. keyName)
    else
        HotkeyLabel.Text = "UI Hotkey: Invalid"
        wait(1)
        HotkeyLabel.Text = "UI Hotkey: " .. currentHotkey.Name
        log("Invalid hotkey attempted.")
    end
end

-- Record key function
local function startRecordingKey()
    if isRecordingKey then return end
    isRecordingKey = true
    RecordKeyButton.Text = "Press a Key..."
    local connection
    local success, err = pcall(function()
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if not gameProcessedEvent and input.KeyCode ~= Enum.KeyCode.Unknown then
                updateHotkey(input.KeyCode)
                isRecordingKey = false
                RecordKeyButton.Text = "Record Key"
                connection:Disconnect()
            end
        end)
    end)
    if not success then
        log("Key recording failed: " .. tostring(err))
        isRecordingKey = false
        RecordKeyButton.Text = "Record Key"
    end
end

-- Disable script function
local function disableScript()
    isSpaceSpamming = false
    isQESpamming = false
    if spaceSpamCoroutine then
        coroutine.close(spaceSpamCoroutine)
        spaceSpamCoroutine = nil
    end
    if QESpamCoroutine then
        coroutine.close(QESpamCoroutine)
        QESpamCoroutine = nil
    end
    if hotkeyConnection then
        hotkeyConnection:Disconnect()
        hotkeyConnection = nil
    end
    if spaceToggleConnection then
        spaceToggleConnection:Disconnect()
        spaceToggleConnection = nil
    end
    if QEToggleConnection then
        QEToggleConnection:Disconnect()
        QEToggleConnection = nil
    end
    local success, err = pcall(function()
        ScreenGui:Destroy()
    end)
    if not success then
        log("ScreenGui destroy failed: " .. tostring(err))
    end
    log("Script disabled.")
end

-- Event connections
local success, err = pcall(function()
    SpaceToggleButton.MouseButton1Click:Connect(toggleSpaceSpam)
    QEToggleButton.MouseButton1Click:Connect(toggleQESpam)
    ServerHopButton.MouseButton1Click:Connect(serverHop)
    RejoinButton.MouseButton1Click:Connect(rejoin)
    HideButton.MouseButton1Click:Connect(toggleUIVisibility)
    RecordKeyButton.MouseButton1Click:Connect(startRecordingKey)
    DisableButton.MouseButton1Click:Connect(disableScript)

    for _, button in pairs({SpaceToggleButton, QEToggleButton, ServerHopButton, RejoinButton, HideButton, RecordKeyButton, DisableButton}) do
        button.MouseEnter:Connect(function()
            animateButton(button, true)
        end)
        button.MouseLeave:Connect(function()
            animateButton(button, false)
        end)
    end

    spaceToggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.F then
            toggleSpaceSpam()
        end
    end)

    QEToggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.R then
            toggleQESpam()
        end
    end)

    LocalPlayer.AncestryChanged:Connect(function()
        disableScript()
    end)
end)
if not success then
    log("Event connection failed: " .. tostring(err))
    disableScript()
    return
end

-- Initial hotkey setup
updateHotkey(Enum.KeyCode.H)

log("Script initialized successfully.")
